package sugarcube.formats.pdf.reader;

import sugarcube.common.system.log.Log;
import sugarcube.common.system.log.Logger;
import sugarcube.common.system.util.Sys;
import sugarcube.common.data.Bool;
import sugarcube.common.ui.gui.FileChooser3;
import sugarcube.common.system.io.DragAndDrop;
import sugarcube.common.system.io.File3;
import sugarcube.common.system.process.Progression;
import sugarcube.common.ui.gui.Frame3;
import sugarcube.common.ui.gui.LogPane;
import sugarcube.common.ui.gui.Worker3;
import sugarcube.formats.ocd.analysis.DexterProps;

import javax.swing.*;

public class PDF2OCDFrame extends Frame3 implements DragAndDrop.Listener
{
  static
  {
    Sys.LAF();
  }
  protected Progression progression = new Progression();
  protected Bool stopProcess = new Bool();
  private Logger log = new Logger("Dexter Log", null);
  private LogPane logPane;
  private File3 pdfFile = null;
  private File3 ocdFile = null;
  private DexterProps props = new DexterProps();
  private long timestamp = 0;

  public PDF2OCDFrame()
  {
    super(Dexter.VERSION.toString());
    this.setResizable(true);
    this.sugarcubize();
    //this.setPackDimension();    
    initComponents();
    DragAndDrop fileDrop = new DragAndDrop(this);
    this.setTransferHandler(fileDrop);
    this.logPane = (LogPane) this.logScrollpane;
    this.logPane.setTransferHandler(fileDrop);
    Logger.AddBigBrother(log);
    this.log.addListener(logPane);
    this.chooseField.setEditable(false);
    this.progressBar.setStringPainted(true);
    this.setButtonsEnabled(true);
    progression.setBoolCancel(stopProcess);
    progression.setProgressBar(progressBar);
    this.center();
    log.info(this, " - Welcome to " + Dexter.VERSION.toString());
  }

  public final void setButtonsEnabled(boolean enabled)
  {
    this.enlightButton.setEnabled(enabled && ocdFile != null);
    this.chooseButton.setEnabled(enabled);
    this.chooseField.setEnabled(enabled);
    this.ocdButton.setEnabled(enabled);
    this.checkGraphics.setEnabled(enabled);
    this.checkImages.setEnabled(enabled);
    this.stopButton.setEnabled(!enabled);
    this.closeButton.setEnabled(enabled);
    this.setDisposeOnClose(enabled);
  }

  @Override
  public void close()
  {
    this.stopProcess.setTrue();
    super.close();
  }

  @Override
  public void dropped(DragAndDrop dnd)
  {
    this.updateFile(dnd.file());
  }

  public void updateFile(File3 file)
  {
    if (file == null)
      return;
    this.log.info(this, ".updateFile - setting file: " + file.getAbsolutePath());
    this.chooseField.setText(" " + file.getAbsolutePath());
    if (file.isExtension(".pdf"))
    {
      this.pdfFile = file;
      this.setButtonsEnabled(true);
    }
    else
      this.progression.log().warn(this, ".updateFile - unsupported file extension: " + file.extension());
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    wrapperPanel = new javax.swing.JPanel();
    mainPanel = new javax.swing.JPanel();
    chooseField = new javax.swing.JTextField();
    chooseButton = new javax.swing.JButton();
    logScrollpane = new LogPane();
    buttonPanel = new javax.swing.JPanel();
    stopButton = new javax.swing.JButton();
    closeButton = new javax.swing.JButton();
    ocdButton = new javax.swing.JButton();
    checkGraphics = new javax.swing.JCheckBox();
    checkImages = new javax.swing.JCheckBox();
    enlightButton = new javax.swing.JButton();
    progressBar = new javax.swing.JProgressBar();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    chooseField.setText(" Please choose PDF file");
    chooseField.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        chooseFieldActionPerformed(evt);
      }
    });

    chooseButton.setText("Choose File");
    chooseButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        chooseButtonActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
    mainPanel.setLayout(mainPanelLayout);
    mainPanelLayout.setHorizontalGroup(
      mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(mainPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(mainPanelLayout.createSequentialGroup()
            .addComponent(chooseField, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(chooseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(logScrollpane))
        .addContainerGap())
    );
    mainPanelLayout.setVerticalGroup(
      mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(mainPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(chooseField)
          .addComponent(chooseButton, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(logScrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE))
    );

    stopButton.setText("Stop");
    stopButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        stopButtonActionPerformed(evt);
      }
    });

    closeButton.setText("Close");
    closeButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        closeButtonActionPerformed(evt);
      }
    });

    ocdButton.setText("PDF to OCD");
    ocdButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        ocdButtonActionPerformed(evt);
      }
    });

    checkGraphics.setText("Remove Graphics");

    checkImages.setText("Remove Images");

    enlightButton.setText("View OCD File");
    enlightButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        enlightButtonActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
    buttonPanel.setLayout(buttonPanelLayout);
    buttonPanelLayout.setHorizontalGroup(
      buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(buttonPanelLayout.createSequentialGroup()
        .addComponent(ocdButton)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(checkGraphics)
          .addComponent(checkImages, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(enlightButton)
        .addGap(61, 61, 61)
        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
    );
    buttonPanelLayout.setVerticalGroup(
      buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(ocdButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addGroup(buttonPanelLayout.createSequentialGroup()
        .addComponent(checkGraphics)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(checkImages))
      .addComponent(stopButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(enlightButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    javax.swing.GroupLayout wrapperPanelLayout = new javax.swing.GroupLayout(wrapperPanel);
    wrapperPanel.setLayout(wrapperPanelLayout);
    wrapperPanelLayout.setHorizontalGroup(
      wrapperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addGroup(wrapperPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(wrapperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(buttonPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    wrapperPanelLayout.setVerticalGroup(
      wrapperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(wrapperPanelLayout.createSequentialGroup()
        .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(0, 0, 0)
        .addComponent(wrapperPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGap(0, 0, 0))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(wrapperPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void closeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_closeButtonActionPerformed
  {//GEN-HEADEREND:event_closeButtonActionPerformed
    close();
  }//GEN-LAST:event_closeButtonActionPerformed

  private void chooseFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chooseFieldActionPerformed
  {//GEN-HEADEREND:event_chooseFieldActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_chooseFieldActionPerformed

  private void stopButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_stopButtonActionPerformed
  {//GEN-HEADEREND:event_stopButtonActionPerformed
    this.stopProcess.setTrue();
  }//GEN-LAST:event_stopButtonActionPerformed

  private void chooseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chooseButtonActionPerformed
  {//GEN-HEADEREND:event_chooseButtonActionPerformed
    FileChooser3 chooser = new FileChooser3(this);
    chooser.setFileSelectionMode(FileChooser3.FILES_AND_DIRECTORIES);
    chooser.setMultiSelectionEnabled(false);
    if (chooser.acceptOpenDialog())
      updateFile(chooser.file());
  }//GEN-LAST:event_chooseButtonActionPerformed

  private void ocdButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ocdButtonActionPerformed
  {//GEN-HEADEREND:event_ocdButtonActionPerformed
    log.info(this, " - converting PDF to OCD");
    this.stopProcess.setFalse();
    this.progression.reset();
    this.setButtonsEnabled(false);
    DexterProps.DO_KEEP_PATHS = !this.checkGraphics.isSelected();
    DexterProps.DO_KEEP_IMAGES = !this.checkImages.isSelected();
    this.timestamp = System.currentTimeMillis();
    new Worker3(new Worker3.Processable()
    {
      @Override
      public void process(Worker3 worker, Object... empty)
      {
        File3 outputFile = pdfFile.extense(".ocd");

        Dexter writer = new Dexter(props);
        writer.setOCDProgression(progression);
        writer.convert(pdfFile, outputFile);
        ocdFile = outputFile;
        Log.debug(this, " file: " + pdfFile);
      }

      @Override
      public void done(Worker3 worker, Object... empty)
      {
        log.info(PDF2OCDFrame.this, " - processing time elapsed: " + ((System.currentTimeMillis() - timestamp) / 1000) + " seconds");
        logPane.flush();
        setButtonsEnabled(true);
      }
    });
  }//GEN-LAST:event_ocdButtonActionPerformed

  private void enlightButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_enlightButtonActionPerformed
  {//GEN-HEADEREND:event_enlightButtonActionPerformed

  }//GEN-LAST:event_enlightButtonActionPerformed

  public static void main(String... args)
  {
    SwingUtilities.invokeLater(new Runnable()
    {
      @Override
      public void run()
      {
        new PDF2OCDFrame().setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel buttonPanel;
  private javax.swing.JCheckBox checkGraphics;
  private javax.swing.JCheckBox checkImages;
  private javax.swing.JButton chooseButton;
  private javax.swing.JTextField chooseField;
  private javax.swing.JButton closeButton;
  private javax.swing.JButton enlightButton;
  private javax.swing.JScrollPane logScrollpane;
  private javax.swing.JPanel mainPanel;
  private javax.swing.JButton ocdButton;
  private javax.swing.JProgressBar progressBar;
  private javax.swing.JButton stopButton;
  private javax.swing.JPanel wrapperPanel;
  // End of variables declaration//GEN-END:variables
}
